import logging
import asyncio
from datetime import time
from pytz import timezone  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
from telegram.ext import ApplicationBuilder, CommandHandler, JobQueue, ContextTypes
from telegram import Update

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = '8156209960:AAFWJiIWfBDHPpo6PVqCtDAemyFK4fAHLX8'  # –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
CHANNEL_ID = '-4867904183'  # ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# --- –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ---

# –ü–æ–≥–æ–¥–∞ —á–µ—Ä–µ–∑ open-meteo.com
async def get_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /weather <–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞>")
        return

    city = " ".join(context.args)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
    geocode_url = f"https://nominatim.openstreetmap.org/search?q={city}&format=json&limit=1"
    try:
        geocode_response = requests.get(geocode_url, headers={"User-Agent": "TelegramBot"})
        if not geocode_response.ok or len(geocode_response.json()) == 0:
            await update.message.reply_text("üèô –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        location = geocode_response.json()[0]
        latitude = location["lat"]
        longitude = location["lon"]

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
        weather_url = f" https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&current_weather=true"
        weather_data = requests.get(weather_url).json()

        current = weather_data["current_weather"]

        weather_info = (
            f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {location['display_name']}:\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current['temperature']}¬∞C\n"
            f"üå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {current['windspeed']} –º/—Å\n"
            f"üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {current['winddirection']}¬∞\n"
            f"‚òÅ –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {current['weathercode']}"
        )

        await update.message.reply_text(weather_info)

    except Exception as e:
        await update.message.reply_text(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
async def send_message(context: ContextTypes.DEFAULT_TYPE):
    try:
        await context.bot.send_message(chat_id=CHANNEL_ID, text="@Kasodochka @annannassikk @Annafelous üî• –û–≥–æ–Ω—ë–∫!")
        logging.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /send
async def test_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await context.bot.send_message(chat_id=CHANNEL_ID, text="@Demenos üß™ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
        logging.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ù–∞–∑–Ω–∞—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
def schedule_jobs(job_queue: JobQueue):
    tz = timezone('Europe/Moscow')  # –£–∫–∞–∂–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å!
    daily_time = time(hour=20, minute=0, tzinfo=tz)  # 20:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    job_queue.run_daily(send_message, daily_time)
    logging.info(f"‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞ {daily_time.strftime('%H:%M')} –ø–æ –≤—Ä–µ–º–µ–Ω–∏ {tz}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    try:
        application = ApplicationBuilder().token(TOKEN).build()

        if application.job_queue is None:
            print("‚ö†Ô∏è JobQueue –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        else:
            print("‚úÖ JobQueue —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("send", test_send))

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞—á–∏
        schedule_jobs(application.job_queue)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
        await application.initialize()
        await application.start()
        print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await application.updater.start_polling(drop_pending_updates=True)

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        await asyncio.Event().wait()

    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await application.stop()
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    asyncio.run(main())